using System.Net;
using System.Net.Http.Json;
using System.Text.Json;
using FreelanceAI.Core.Constants;
using FreelanceAI.Core.Interfaces;
using FreelanceAI.Core.Models;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

namespace FreelanceAI.ApiRouter.Providers;

public class GroqProvider : IAIProvider
{
    private readonly string _apiKey;
    private readonly IConfiguration _config;
    private readonly HttpClient _httpClient;
    private readonly ILogger<GroqProvider> _logger;
    private readonly int MaxTokens;

    private readonly string Model;

    public GroqProvider(HttpClient httpClient, IConfiguration config, ILogger<GroqProvider> logger)
    {
        _httpClient = httpClient;
        _apiKey = config["Groq:ApiKey"] ?? throw new InvalidOperationException("Groq API key not configured");
        _logger = logger;
        _config = config;

        Model = config["Groq:Model"] ?? GroqConstants.Model;
        MaxTokens = config.GetValue("Groq:MaxTokens", GroqConstants.MaxTokens);

        _httpClient.BaseAddress = new Uri(config["Groq:BaseUrl"] ?? GroqConstants.BaseUrl);
        _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_apiKey}");
        _httpClient.Timeout = TimeSpan.FromMinutes(2);
    }

    public string Name => "Groq";
    public int Priority => 1; // Highest priority (fastest, free)
    public decimal CostPerToken => 0.0m; // Free tier
    public bool IsAvailable { get; private set; } = true;

    public async Task<string> GenerateAsync(string prompt, AIRequestOptions options)
    {
        try
        {
            var request = new
            {
                model = Model,
                messages = new[]
                {
                    new { role = "system", content = GetSystemPrompt() },
                    new { role = "user", content = prompt }
                },
                max_tokens = Math.Min(options.MaxTokens, MaxTokens),
                temperature = options.Temperature,
                stop = options.StopSequences?.ToArray() ?? Array.Empty<string>()
            };

            _logger.LogDebug("Sending request to Groq with model: {Model}", request.model);

            var response = await _httpClient.PostAsJsonAsync("chat/completions", request);

            if (!response.IsSuccessStatusCode)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                _logger.LogError("Groq API returned error {StatusCode}: {Error}",
                    response.StatusCode, errorContent);

                // Mark as unavailable for certain error types
                if (response.StatusCode == HttpStatusCode.ServiceUnavailable ||
                    response.StatusCode == HttpStatusCode.TooManyRequests)
                    IsAvailable = false;

                throw new HttpRequestException($"Groq API error: {response.StatusCode} - {errorContent}");
            }

            var content = await response.Content.ReadAsStringAsync();

            if (string.IsNullOrEmpty(content))
            {
                _logger.LogError("Groq API returned empty response");
                throw new InvalidOperationException("Empty response from Groq API");
            }

            var result = JsonSerializer.Deserialize<GroqResponse>(content, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            if (result?.Choices == null || !result.Choices.Any())
            {
                _logger.LogError("Groq API response missing choices: {Content}", content);
                throw new InvalidOperationException("Invalid response structure from Groq API");
            }

            var generatedText = result.Choices.FirstOrDefault()?.Message?.Content;

            if (string.IsNullOrEmpty(generatedText))
            {
                _logger.LogError("Groq API returned empty generated text");
                throw new InvalidOperationException("No content generated by Groq API");
            }

            _logger.LogDebug("Received response from Groq: {Length} characters", generatedText.Length);

            return generatedText;
        }
        catch (HttpRequestException ex)
        {
            _logger.LogError(ex, "HTTP error calling Groq API");
            IsAvailable = false;
            throw new InvalidOperationException($"Groq API HTTP error: {ex.Message}", ex);
        }
        catch (TaskCanceledException ex) when (ex.InnerException is TimeoutException)
        {
            _logger.LogError(ex, "Timeout calling Groq API");
            throw new InvalidOperationException("Groq API request timed out", ex);
        }
        catch (TaskCanceledException ex)
        {
            _logger.LogError(ex, "Request was cancelled calling Groq API");
            throw new InvalidOperationException("Groq API request was cancelled", ex);
        }
        catch (JsonException ex)
        {
            _logger.LogError(ex, "Failed to parse Groq API response");
            throw new InvalidOperationException($"Invalid JSON response from Groq API: {ex.Message}", ex);
        }
        catch (InvalidOperationException)
        {
            // Re-throw our own exceptions as-is
            throw;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Unexpected error calling Groq API");
            throw new InvalidOperationException($"Unexpected error from Groq API: {ex.Message}", ex);
        }
    }

    public async Task<bool> CheckHealthAsync()
    {
        try
        {
            _logger.LogDebug("Checking Groq API health");

            // Use a lighter endpoint or a simple test request
            var testRequest = new
            {
                model = Model,
                messages = new[]
                {
                    new { role = "user", content = "test" }
                },
                max_tokens = 1,
                temperature = 0.0
            };

            var response = await _httpClient.PostAsJsonAsync("chat/completions", testRequest);
            IsAvailable = response.IsSuccessStatusCode;

            if (IsAvailable)
            {
                _logger.LogDebug("Groq API health check passed");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                _logger.LogWarning("Groq API health check failed with status: {StatusCode}, Error: {Error}",
                    response.StatusCode, errorContent);
            }

            return IsAvailable;
        }
        catch (TaskCanceledException ex)
        {
            _logger.LogWarning(ex, "Groq API health check timed out");
            IsAvailable = false;
            return false;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Groq API health check failed");
            IsAvailable = false;
            return false;
        }
    }

    private static string GetSystemPrompt()
    {
        return "You are an expert software developer specializing in C#, JavaScript, and web technologies. " +
               "Provide clean, production-ready code with clear explanations. " +
               "Focus on best practices, performance, and maintainability.";
    }

    // Positional records (constructor-based)
    private record GroqResponse(Choice[]? Choices);

    private record Choice(Message? Message);

    private record Message(string? Content);
}